/* This file was generated by `pkl-typescript` from Pkl module `CollaborativeStateMachineDescription`. */
/* DO NOT EDIT! */
/* istanbul ignore file */
/* eslint-disable */
import * as pklTypescript from "@pkl-community/pkl-typescript"

// Ref: Module root.
// Collaborative state machine construct. Represents the highest level entity in a description.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
//  <tr><td>version</td><td>CSML version</td><td>Yes</td></tr>
//  <tr><td>stateMachines</td><td>StateClass machines</td><td>Yes (at least one)</td></tr>
//  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
//  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   name: 'Collaborative State Machine Name',
//   version: '0.1',
//   stateMachines: [...]
// }
// </pre>
//
// @since CSML 1.0.
export interface CollaborativeStateMachineDescription {
  // The name.
  name: string

  // The CSML version.
  //
  // The following CSML versions are valid:
  // <table border="1">
  //   <tr><th>Version</th><th>Value</th></tr>
  //   <tr><td>Version 0.1</td><td>0.1</td></tr>
  // </table>
  version: Version

  // The state machines.
  //
  // At least one state machine must be provided.
  stateMachines: Array<StateMachineDescription>

  // The optional lexical declaration of local context variables.
  localContext: ContextDescription|null

  // The optional lexical declaration of persistent context variables.
  persistentContext: ContextDescription|null
}

// Ref: Pkl class `CollaborativeStateMachineDescription.StateMachineDescription`.
// State machine construct. Represents a state machine within a collaborative state machine.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
//  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
//  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   name: 'Collaborative State Machine Name',
//   states: [...],
//   stateMachines: [...],
//   localContext: [...],
//   persistentContext: [...],
//   guards: [],
//   actions: [],
// }
// </pre>
//
// @since CSML 1.0.
export interface StateMachineDescription {
  // The name.
  name: string

  // The states.
  // <p>
  // At least one initial state must be provided.
  // </p>
  states: Array<StateDescription>

  // The nested state machines of this state machine.
  stateMachines: Array<StateMachineDescription>

  // The optional lexical declaration of local context variables.
  localContext: ContextDescription|null

  // The optional lexical declaration of persistent context variables.
  persistentContext: ContextDescription|null
}

// Ref: Pkl class `CollaborativeStateMachineDescription.StateDescription`.
// State construct, represents an atomic state of a state machine.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
//  <tr><td>initial</td><td>Initial state flag</td><td>No</td></tr>
//  <tr><td>terminal</td><td>Terminal state flag</td><td>No</td></tr>
//  <tr><td>entry</td><td>On entry actions</td><td>No</td></tr>
//  <tr><td>exit</td><td>On exit actions</td><td>No</td></tr>
//  <tr><td>while</td><td>While actions</td><td>No</td></tr>
//  <tr><td>after</td><td>Timeout actions</td><td>No</td></tr>
//  <tr><td>on</td><td>On transitions</td><td>No</td></tr>
//  <tr><td>always</td><td>Always transitions</td><td>No</td></tr>
//  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
//  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
//  <tr><td>staticContext</td><td>Lexical description of the static context</td><td>No</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   name: 'State Name',
//   initial: true,
//   terminal: false,
//   entry: [...],
//   exit: [...],
//   while: [...],
//   after: [...],
//   on: [...],
//   localContext: [...],
//   persistentContext: [...],
//   staticContext: [...]
// }
// </pre>
//
// @since CSML 1.0.
export interface StateDescription {
  // The name.
  name: string

  // The is initial flag. Indicating if this is the initial state of the state machine. Exactly one state must be the initial state of a
  // state machine. If omitted, the state is not initial.
  initial: boolean

  // The is terminal flag. Indicating if this is a terminal state of the state machine. If omitted, the state is not terminal.
  terminal: boolean

  // The optional entry actions.
  entry: Array<ActionDescription>

  // The optional exit actions.
  exit: Array<ActionDescription>

  // The optional while actions.
  while: Array<ActionDescription>

  // The optional after (timeout) actions. Actions provided must be raise event actions.
  after: Array<ActionDescription>

  // The optional on transitions. On transitions are taken upon event receiving an event that matches the 'event' keyword of the on
  // transition.
  on: Array<OnTransitionDescription>

  // The optional always transitions. Always transitions are always taken upon entering a state.
  always: Array<TransitionDescription>

  // The optional lexical declaration of local context variables.
  localContext: ContextDescription

  // The optional lexical declaration of persistent context variables.
  persistentContext: ContextDescription

  // The optional lexical declaration of static context variables.
  staticContext: ContextDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.ActionDescription`.
// An abstract action construct. Represents an action that can be taken in a state machine.
export interface ActionDescription {
  type: Type
}

// Ref: Pkl class `CollaborativeStateMachineDescription.OnTransitionDescription`.
// On transition construct. Represents a transition that is to be taken based on a received event.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>event</td><td>Event</td><td>Yes</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   target: 'StateClass Name',
//   guards: [...],
//   actions: [...],
//   event: 'Event Name'
// }
// </pre>
//
// @since CSML 1.0.
export interface OnTransitionDescription {
  // The optional target state name. If the target is omitted, the transition is internal.
  target: string|null

  // The optional guards. All guard expressions need to evaluate to true before a transition can be taken.
  guards: Array<GuardDescription>

  // The optional actions. These actions are executed during the transition, if the transition is taken.
  actions: Array<ActionDescription>

  // The optional else target name. If the guards evaluate to false, the state machine ends up in this target state.
  else: string|null

  event: string
}

// Ref: Pkl class `CollaborativeStateMachineDescription.GuardDescription`.
// Guard construct. Represents a conditional (if) that determines if a transition can be taken.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
//  <tr><td>expression</td><td>Expression</td><td>Yes</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   name: 'Guard Name',
//   expression: 'a==5'
// }
// </pre>
//
// @since CSML 1.0.
export interface GuardDescription {
  // An expression.
  // <p>
  // The expression must evaluate to a boolean value.
  // </p>
  expression: ExpressionDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.TransitionDescription`.
// Transition construct. Represents a transition that is to be taken regardless of an event.
//
// Keywords:
// <table border="1">
//  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
//  <tr><td>target</td><td>Target state</td><td>Yes</td></tr>
//  <tr><td>guards</td><td>Guards</td><td>Yes</td></tr>
//  <tr><td>actions</td><td>Actions</td><td>Yes</td></tr>
//  <tr><td>else</td><td>Else target</td><td>No</td></tr>
// </table>
//
// Example:
// <pre>
// {
//   target: 'State Name',
//   guards: [...],
//   actions: [...]
// }
// </pre>
//
// @since CSML 1.0.
export interface TransitionDescription {
  // The optional target state name. If the target is omitted, the transition is internal.
  target: string|null

  // The optional guards. All guard expressions need to evaluate to true before a transition can be taken.
  guards: Array<GuardDescription>

  // The optional actions. These actions are executed during the transition, if the transition is taken.
  actions: Array<ActionDescription>

  // The optional else target name. If the guards evaluate to false, the state machine ends up in this target state.
  else: string|null
}

// Ref: Pkl class `CollaborativeStateMachineDescription.ContextDescription`.
// Context description construct. Represents a context.
export interface ContextDescription {
  variables: Array<ContextVariableDescription>
}

// Ref: Pkl class `CollaborativeStateMachineDescription.ContextVariableDescription`.
// Context variable description construct. Represents a context variable.
export interface ContextVariableDescription {
  name: string

  value: ExpressionDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.AssignActionDescription`.
// Assign action construct. Represents an assignment of a value to a context variable.
export interface AssignActionDescription extends ActionDescription {
  type: Type

  variable: ContextVariableDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.CreateActionDescription`.
// Create action construct. Represents the creation of a context variable.
export interface CreateActionDescription extends ActionDescription {
  type: Type

  // The context variable to be created.
  variable: ContextVariableDescription

  // Determines if the context variable is persistent.
  isPersistent: boolean
}

// Ref: Pkl class `CollaborativeStateMachineDescription.InvokeActionDescription`.
// Invoke action construct. Represents the invocation of a service.
export interface InvokeActionDescription extends ActionDescription {
  type: Type

  // The service type.
  serviceType: string

  // Determines if the service is local.
  isLocal: boolean

  // The input parameters.
  input: Array<ContextVariableDescription>

  // The events to be raised when the service is done.
  done: Array<EventDescription>

  // The output mappings to context variables.
  output: Array<ContextVariableReferenceDescription>
}

// Ref: Pkl class `CollaborativeStateMachineDescription.EventDescription`.
// Event construct. Represents an event that can be raised.
export interface EventDescription {
  // The event name.
  name: string

  // The event channel.
  channel: EventChannel

  // The event data.
  data: Array<ContextVariableDescription>
}

// Ref: Pkl class `CollaborativeStateMachineDescription.ContextVariableReferenceDescription`.
// Context variable reference construct. Represents a reference to a context variable.
export interface ContextVariableReferenceDescription {
  reference: string
}

// Ref: Pkl class `CollaborativeStateMachineDescription.MatchActionDescription`.
// Match action construct. Represents a match action.
export interface MatchActionDescription extends ActionDescription {
  type: Type

  // The value to be matched.
  value: ExpressionDescription

  // The match cases.
  cases: Array<MatchCaseDescription>
}

// Ref: Pkl class `CollaborativeStateMachineDescription.MatchCaseDescription`.
// Match case construct.
export interface MatchCaseDescription {
  // The case value.
  case: ExpressionDescription

  // The actions to be taken if the case value matches the value of the match action.
  action: ActionDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.RaiseActionDescription`.
// Raise action construct. Represents the raising of an event.
export interface RaiseActionDescription extends ActionDescription {
  type: Type

  // The event to be raised.
  event: EventDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.TimeoutActionDescription`.
// Timeout action construct. Represents a timeout action.
export interface TimeoutActionDescription extends ActionDescription {
  type: Type

  // The name of the timeout action.
  name: string

  // The delay until the timeout action is executed.
  delay: ExpressionDescription

  // The action to be executed when the timeout occurs.
  action: ActionDescription
}

// Ref: Pkl class `CollaborativeStateMachineDescription.TimeoutResetActionDescription`.
// Timeout reset action construct. Represents a timeout reset action.
export interface TimeoutResetActionDescription extends ActionDescription {
  type: Type

  // The timeout action to reset.
  action: string
}

// Ref: Pkl type `CollaborativeStateMachineDescription.Version`.
type Version = "2.0"

// Ref: Pkl type `CollaborativeStateMachineDescription.Type`.
type Type = "invoke" | "create" | "assign" | "lock" | "unlock" | "raise" | "timeout" | "timeoutReset" | "match"

// Ref: Pkl type `CollaborativeStateMachineDescription.ExpressionDescription`.
type ExpressionDescription = string

// Ref: Pkl type `CollaborativeStateMachineDescription.EventChannel`.
type EventChannel = "internal" | "external" | "global" | "peripheral"

// LoadFromPath loads the pkl module at the given path and evaluates it into a CollaborativeStateMachineDescription
export const loadFromPath = async (path: string): Promise<CollaborativeStateMachineDescription> => {
  const evaluator = await pklTypescript.newEvaluator(pklTypescript.PreconfiguredOptions);
  try {
    const result = await load(evaluator, pklTypescript.FileSource(path));
    return result
  } finally {
    evaluator.close()
  }
};

export const load = (evaluator: pklTypescript.Evaluator, source: pklTypescript.ModuleSource): Promise<CollaborativeStateMachineDescription> =>
  evaluator.evaluateModule(source) as Promise<CollaborativeStateMachineDescription>;
